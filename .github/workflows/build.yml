name: Build and package
on:
  push:
    branches: [main]
  pull_request:
jobs:

  build-native:
    name: Build SkillerWhaleSync on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: ./gradlew nativeCompile
      - name: Rename native build (Windows)
        working-directory: build/native/nativeCompile
        run: mv SkillerWhaleSync.exe SkillerWhaleSync-${{ runner.os }}-${{ runner.arch }}.exe
        if: runner.os == 'Windows'
      - name: Rename native build (non-Windows)
        working-directory: build/native/nativeCompile
        run: mv SkillerWhaleSync SkillerWhaleSync-${{ runner.os }}-${{ runner.arch }}
        if: runner.os != 'Windows'
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          path: build

  build-aarch64:
    name: Build SkillerWhaleSync for linux/aarch64
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          env: |
            JAVA_HOME: /java
          install: |
            apt-get update -q -y
            apt-get install -q -y curl
            mkdir /java
            export
            curl -s -L https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-linux-aarch64-22.3.0.tar.gz | tar xz --strip-components=1 -C /java
          run: |
            JAVA_OPTS="-Djdk.lang.Process.launchMechanism=vfork" ./gradlew --no-daemon nativeCompile
            mv build/native/nativeCompile/SkillerWhaleSync{,-Linux-aarch64}
            cp -a build /artifacts/build
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          path: build

  release:
    name: "Pre-release binary"
    needs: [build-native, build-aarch64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        name: Download build
      - name: Display fetched artifacts
        run: ls -R
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            artifact/libs/SkillerWhaleSync.jar
            artifact/native/nativeCompile/SkillerWhaleSync-*
